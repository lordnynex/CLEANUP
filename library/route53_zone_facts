#!/usr/bin/python

DOCUMENTATION = '''
---
module: route53_zone_facts
short_description: Retrieve information about a Route53 Zone
description:
  - Retrieve information about a Route53 Zone
author: Dean Wilson
requirements:
  - Requires the Boto module
options:
  zone_name:
    description:
      - The zone name to look up. Must be fully qualified (end with a '.')
    required: true
    default: null
    aliases: []
extends_documentation_fragment: aws

'''

EXAMPLES = '''

  - name: get route53 info
    route53_zone_facts: zone_name="example.org." region="eu-west-1"
    register: zone_info

  - debug: var=zone_info

'''

try:
    import boto
    import boto.route53
except ImportError:
    print "failed=True msg='boto required for this module'"
    exit(1)


def main():
    argument_spec = ec2_argument_spec()
    argument_spec.update(
        dict(
            zone_name=dict(required=True),
        )
    )

    module = AnsibleModule(
        argument_spec=argument_spec,
    )

    zone_name = module.params['zone_name']
    region = module.params['region']

    r53 = boto.route53.connect_to_region(region)

    # check if our zone exists. Error if it does not
    zones = [zone.name for zone in r53.get_zones()]
    if zone_name not in zones:
        module.fail_json(msg="Zone {} was not found in {}".format(zone_name, region))

    zone = r53.get_zone(zone_name)

    result = {
        'zone_name': zone_name,
        'zone_type': None,
        'zone_id': None,
        'zone_comment': None,
        'record_count': None,
        'name_servers': [],
    }

    result['zone_type'] = 'public' if zone.config['PrivateZone'] else 'private'
    result['zone_id'] = zone.id
    result['zone_comment'] = zone.config.get('Comment', None)
    result['record_count'] = zone.resourcerecordsetcount
    result['name_servers'] = zone.get_nameservers()

    module.exit_json(**result)


# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
