#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Std;

my %opts;
getopts("s", \%opts);

my (@records, $rec);
my ($entered_mcode, $entered_ir, $entered_bc);

while (<>) {
    if ($entered_mcode) {
        if (/^[a-f0-9]+\s+\S+/) {
            $rec->{mcode_cnt}++;
            next;
        }
        undef $entered_mcode;
        undef $rec;

    }

    if ($entered_ir) {
        if (/^\d+/) {
            #warn "HERE";
            $rec->{ir_cnt}++;
            next;
        }
        undef $entered_ir;
        undef $rec;

    }

    if ($entered_bc) {
        if (/^\d+/) {
            #warn "HERE";
            $rec->{bc_cnt}++;
            next;
        }
        undef $entered_bc;
        undef $rec;
    }

    if (/^---- TRACE (\d+) start (\S+)/) {
        my $id = $1;
        $entered_bc = 1;
        $rec = $records[$id];
        if (!$rec) {
            $rec = { bc_cnt => 0, mcode_size => 0, mcode_cnt => 0, ir_cnt => 0};
            $records[$id] = $rec;
        }
        next;
    }

    if (/^---- TRACE (\d+) mcode (\d+)/) {
        my ($id, $mcode_size) = ($1, $2);
        $entered_mcode = 1;
        $rec = $records[$id];
        if (!$rec) {
            $rec = { bc_cnt => 0, mcode_size => 0, mcode_cnt => 0, ir_cnt => 0};
            $records[$id] = $rec;
        } else {
            $rec->{mcode_size} = $mcode_size;
        }
        next;
    }

    if (/^---- TRACE (\d+) IR$/) {
        my $id = $1;
        $entered_ir = 1;
        $rec = $records[$id];
        if (!$rec) {
            $rec = { bc_cnt => 0, mcode_size => 0, mcode_cnt => 0, ir_cnt => 0};
            $records[$id] = $rec;
        }
        next;
    }

    if (/^---- TRACE (\d+) stop -> stitch/) {
        my $id = $1;
        $rec = $records[$id];
        if (!$rec) {
            warn "No record $id for $_";
        }
        $rec->{stitch} = 1;
    }
}

#exit;

my ($bc_cnt_sum, $ir_cnt_sum, $mcode_size_sum, $mcode_cnt_sum) = (0, 0, 0, 0);
my ($max_bc_cnt, $max_mcode_size, $max_mcode_cnt, $max_ir_cnt) = (0, 0, 0, 0);
my ($min_bc_cnt, $min_mcode_cnt, $min_ir_cnt);
my $ntraces = 0;
for (my $i = 1; $i < @records; $i++) {
    $rec = $records[$i];
    if ($opts{s} && !$rec->{stitch}) {
        next;
    }
    $ntraces++;
    #print "=== trace $i\n";
    #print "ir count: $rec->{ir_cnt}\n";
    #print "mcode count: $rec->{mcode_cnt}\n";
    #print "mcode size: $rec->{mcode_size}\n";
    $bc_cnt_sum += $rec->{bc_cnt};
    $ir_cnt_sum += $rec->{ir_cnt};
    $mcode_cnt_sum += $rec->{mcode_cnt};
    $mcode_size_sum += $rec->{mcode_size};

    if (!defined $min_bc_cnt || $rec->{bc_cnt} < $min_bc_cnt) {
        $min_bc_cnt = $rec->{bc_cnt};
    }

    if (!defined $min_ir_cnt || $rec->{ir_cnt} < $min_ir_cnt) {
        $min_ir_cnt = $rec->{ir_cnt};
    }

    if (!defined $min_mcode_cnt || $rec->{mcode_cnt} < $min_mcode_cnt) {
        $min_mcode_cnt = $rec->{mcode_cnt};
    }

    if ($rec->{bc_cnt} > $max_bc_cnt) {
        $max_bc_cnt = $rec->{bc_cnt};
    }

    if ($rec->{ir_cnt} > $max_ir_cnt) {
        $max_ir_cnt = $rec->{ir_cnt};
    }

    if ($rec->{mcode_cnt} > $max_mcode_cnt) {
        $max_mcode_cnt = $rec->{mcode_cnt};
    }

    if ($rec->{mcode_size} > $max_mcode_size) {
        $max_mcode_size = $rec->{mcode_size};
    }
}

print "trace count: $ntraces\n";
printf "average bytecode count: %.0f\n", $bc_cnt_sum / $ntraces;
printf "max bytecode count: %d\n", $max_bc_cnt;
print "min bytecode count: ", (defined $min_bc_cnt ? $min_bc_cnt : "NO"), "\n";
printf "average IR count: %.0f\n", $ir_cnt_sum / $ntraces;
printf "max IR count: %d\n", $max_ir_cnt;
print "min IR count: ", (defined $min_ir_cnt ? $min_ir_cnt : "NO"), "\n";
printf "average mcode count: %.0f\n", $mcode_cnt_sum / $ntraces;
printf "max mcode instruction count: %d\n", $max_mcode_cnt;
printf "min mcode instructions count: ", ($min_mcode_cnt || "NO"), "\n";
printf "average mcode size: %.0f\n", $mcode_size_sum / $ntraces;
printf "max mcode size: %d bytes\n", $max_mcode_size;

