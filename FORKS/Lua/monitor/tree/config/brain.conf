# stub of Brain Api on 9092
server {
    listen 9092;
    lua_need_request_body on;

    location /on_premise/link {
      rewrite_by_lua '
        ngx.redirect("http://localhost:3000/on_premise/new");
      ';
    }
    location /api/on_premise/register {
        content_by_lua '
            ngx.log(ngx.NOTICE, "/api/on_premise/register " .. tostring(ngx.req.get_body_data()))
            ngx.print([[{"status": "ok"}]])
        ';
    }

    location /api/on_premise/link {
        content_by_lua '
            ngx.log(ngx.NOTICE, "/api/on_premise/link " .. tostring(ngx.req.get_body_data()))
            ngx.print([[{"status": "ok"}]])
        ';
    }

    location /api/on_premise/unlink {
        content_by_lua '
            ngx.log(ngx.NOTICE, "/api/on_premise/link " .. tostring(ngx.req.get_body_data()))
            ngx.print([[{"status": "ok"}]])
        ';
    }

    location /api/reports {
        content_by_lua '
            ngx.log(ngx.NOTICE, "/api/report " .. tostring(ngx.req.get_body_data()))
            ngx.print([[{"status": "ok"}]])
        ';
    }


    location /api/middleware/search {
            content_by_lua '
                local mws
                local params = ngx.req.get_uri_args()
                if params.query == "cache" then
                  mws= [=[[{"id":40,"name":"Cache","description":"Caches responses so you dont have to care about rate limiting!","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}}]]=]
                else
                  mws= [=[[{"id":34,"name":"Anonymizer","description":"Removes sensitive information from the request before storing it","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":35,"name":"cors","description":"enables CORS for the endpoint","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":36,"name":"metrics","description":"enables CORS for the endpoint","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":37,"name":"404 Alert","description":"Sends an email in case a call returns a 404","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":38,"name":"CORS Header","description":"Cross origin resource sharing allows you to use API directly from the browser","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":39,"name":"add-args","description":"adds a parameter","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":40,"name":"Cache","description":"Caches responses so you dont have to care about rate limiting!","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":41,"name":"cors","description":"enables CORS for the endpoint","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":44,"name":"test","description":"test description","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":45,"name":"Accept-Encoding = Identity","description":"Sets the `Accept-Encoding` header to `identity`. This deactivates gzipped responses. This middleware is inserted by default in all new services.","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}},{"id":46,"name":"Change Query Params","description":"Add or remove query parameters of the request.","version":{"major":1,"minor":0,"patch":0,"pre":null,"build":null}}]]=]
                end
                ngx.log(ngx.NOTICE, "/api/middleware/search :" .. mws)
                ngx.print(mws)
            ';
     }

    location ~ /api/middleware/(\d+) {
        content_by_lua '
        local mw = {
        id = 40,
        name = "Cache",
        version = {
          major = 1, minor = 0, patch = 0, pre = null, build = null
        },
        code = [[
return function (request, next_middleware)
  -- initialize cache store

  local threshold = 60 -- 60 seconds
  local key = "cache=" .. request.uri_full

  if request.method == "GET" then
    local stored = bucket.middleware.get(key)
    if stored then
      local expires = stored.headers["X-Expires"]
      if expires and expires > time.now() then -- not expired yet
        -- send.event({channel = "cache", msg = "returned cached content", level = "debug", key = key, content = stored, expires = expires, now = time.now() })
        stored.headers["Expires"] = time.http(expires)
      end
      return stored
    end
    -- send.event({channel = "cache", msg = "NOT  cached content", level = "debug", key = key, content = stored, expires = expires, now = time.now() })
  end

  -- if content is not cached, do the real request & get response
  local response = next_middleware()

  if request.method == "GET" then
    local expires = time.now() + threshold
    response.headers["X-Expires"] = expires
    bucket.middleware.set(key, response, expires)
    -- send.event({channel = "cache", msg = "stored cached content", level = "debug", content = response })
  end

  return response
end
]]
}

         local json = require "cjson"
            ngx.log(ngx.NOTICE, "/api/middleware/" .. tostring(ngx.var[1]))
            ngx.print(json.encode(mw))
        ';
    }

}
