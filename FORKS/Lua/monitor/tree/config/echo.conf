
lua_shared_dict echo_storage 200m;

  # Echo app on 8081
  server {
    listen 8081;
    lua_need_request_body on;

    proxy_headers_hash_max_size 1024;
    proxy_headers_hash_bucket_size 128;


    gzip on;
    gzip_types application/json application/octet-stream;

    location / {
      content_by_lua '
        local cjson = require "cjson";

        ngx.header.content_type = "application/json"

        if ngx.req.get_method() == "HEAD" then
          ngx.header["Content-Length"] = 0
        else
          local json = cjson.encode({
            version = ngx.req.http_version(),
            method  = ngx.req.get_method(),
            path    = ngx.var.request_uri,
            args    = ngx.req.get_uri_args(),
            body    = ngx.req.get_body_data(),
            headers = ngx.req.get_headers()
          });
          ngx.header["Content-Length"] = #json + 1
          ngx.say(json)
        end
      ';
    }

    location ~* ^/gzip(?<original_uri>/.*)$ {
      proxy_http_version 1.1;
      proxy_pass http://127.0.0.1:8081$original_uri$is_args$args;

      rewrite_by_lua '
        ngx.req.set_header("Accept-Encoding", {"deflate", "gzip"})
      ';
    }

    location /wait/ {
      set_unescape_uri $time $arg_time;
      set_if_empty $time "0";

      content_by_lua '
        local cjson = require "cjson";

        local wait = tonumber(ngx.var.time);

        ngx.header.content_type = "application/json"

        ngx.sleep(wait)

        if ngx.req.get_method() == "HEAD" then
          ngx.header["Content-Length"] = 0
        else
          local json = cjson.encode({
            waited = wait,
            status = "ok"
          });
          ngx.header["Content-Length"] = #json + 1
          ngx.say(json)
        end
      ';
    }

    location /redirect/ {

      content_by_lua '
        ngx.status = 303
        ngx.header.Location = "/index"
      ';

    }

    location /file/ {
      set_unescape_uri $size $arg_size;
      set_unescape_uri $unit $arg_unit;
      set_if_empty $size "1";
      set_if_empty $unit "KB";

      content_by_lua '
        local ffi = require "ffi"
        local ffi_new = ffi.new
        local ffi_str = ffi.string
        local C = ffi.C

        ffi.cdef[[
          int RAND_bytes(unsigned char *buf, int num);
          int RAND_pseudo_bytes(unsigned char *buf, int num);
          ]]

        function bytes(len)
            local buf = ffi_new("char[?]", len)
            C.RAND_pseudo_bytes(buf,len)
            return ffi_str(buf, len)
        end

        local unit = ngx.var.unit:lower()
        local multiply = 1


        if unit == "kb" then
          multiply = 1024
        elseif unit == "mb" then
          multiply = 1024*1014
        else
          error("Unknown unit " .. unit)
        end

        local size = tonumber(ngx.var.size) * multiply

        ngx.header.content_type = "application/octet-stream"
        ngx.header["Content-Length"] = size

        local cache = ngx.shared.echo_storage:get(size)

        if cache then
          ngx.print(cache)
        else
          local output = bytes(size)
          ngx.shared.echo_storage:add(size, output)
          ngx.print(output)
        end
      ';
    }
  }
