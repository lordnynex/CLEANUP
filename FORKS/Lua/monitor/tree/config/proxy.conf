# proxy app on 10002
server {
  listen 10002;
  lua_code_cache on; # We need this on in order to have persistence via requires on init_by_lua
                     # The guardfile restarts nginx on any lua change anyway
  lua_need_request_body on;

  ignore_invalid_headers off;

  location /___pass {
    internal;

    rewrite_by_lua '
      local req = ngx.req

      if ngx.ctx.headers then
        for k,v in pairs(ngx.ctx.headers) do
          req.set_header(k, tostring(v))
        end
      end
    ';

    proxy_pass http://127.0.0.1:10002/___gunzip;

    proxy_http_version 1.1;
    proxy_set_header X-Brainslug $_endpoint_url$_path$is_args$args;
    proxy_set_header Host $http_host;
    proxy_set_header Connection $http_connection;

    proxy_redirect $_endpoint_url $proxy_scheme://$host;
    proxy_redirect $proxy_scheme://$_endpoint_host $proxy_scheme://$host;
    proxy_redirect ~*/(.*)$ $proxy_scheme://$host/$1;
  }

  location /___gunzip {
    gunzip on;

    proxy_pass_request_headers on;
    proxy_http_version 1.1;
    proxy_set_header Connection $http_connection;
    proxy_set_header X-Brainslug "";

    proxy_pass $http_x_brainslug;
  }


  location / {
    set $_operation "";
    set $_params "";
    set $_endpoint_url "";
    set $_endpoint_host "";
    set $_path "";

    access_by_lua_file 'lua/apps/proxy/access.lua';
    content_by_lua_file 'lua/apps/proxy.lua';

  }

  include http_call.conf;
}
