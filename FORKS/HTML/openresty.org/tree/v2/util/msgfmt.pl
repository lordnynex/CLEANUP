#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;

GetOptions(
    "h|help"     => \(my $help),
    "o|output=s" => \(my $luafile),
) or usage(1);

if ($help) {
    usage(0);
}

if (!@ARGV) {
    die "no input file specified.\n";
}

my %locales;
for my $file (@ARGV) {
    load_po($file);
}

my $out;

if (defined $luafile) {
    open $out, ">:encoding(UTF-8)", $luafile
        or die "cannot open $luafile for writing: $!\n";

} else {
    $out = \*STDOUT;
}

print $out <<_EOC_;
--[[
   This Lua code was generated by $0, the Lua I18N tool.
   Any changes made to this file will be lost the next
   time the templates are compiled.

   Copyright 2016 - Yichun Zhang (agentzh) - All rights reserved.
]]

local _M = {}

local mt = { __index = _M }
_EOC_

my @locale_names;
for my $locale (sort keys %locales) {
    $locale =~ s/\W/_/g;
    push @locale_names, $locale;

    print $out "\nlocal trans_$locale = {\n";
    my $dict = $locales{$locale};
    for my $msgid (sort keys %$dict) {
        my $msgstr = $dict->{$msgid};
        print $out "    [$msgid] = $msgstr,\n";
    }
    print $out "}\n";
}

print $out <<_EOC_;
local translators = {
    ['en'] = function (s) return s end,
_EOC_

for my $locale (@locale_names) {
    $locale =~ s/\W/_/g;
    print $out "    ['$locale'] = function (s) return trans_$locale\[s] or s end\n";
}

print $out <<_EOC_;
}

function _M.new(lang)
    local translator = translators[lang]
    if not translator then
        return error("no translator found for language " .. tostring(lang))
    end
    return setmetatable({ translate = translator }, mt)
end

return _M
_EOC_

close $out;

sub load_po {
    my ($pofile, $hits) = @_;

    if ($pofile !~ /([-\w]+)\.po/) {
        die "bad po file name: $pofile\n";
    }

    my $locale = $1;

    open my $in, "<:encoding(UTF-8)", $pofile
        or die "cannot open $pofile for reading: $!\n";

    my ($msgid, %trans, $file, $line);

    while (<$in>) {
        if (/ ^ \s* msg(id|str) \s* (.*? \S) \s* $ /xms) {
            my ($type, $val) = ($1, $2);
            if ($type eq 'id') {
                if (defined $msgid) {
                    die "ERROR: $pofile: line $.: no msgstr defined for msgid $msgid.\n";
                }

                $msgid = $val;

            } else {
                # eq 'str'

                if (!defined $msgid) {
                    die "ERROR: $pofile: line $.: no msgid defined for msgstr $val.\n";
                }

                $trans{$msgid} = $val;
                undef $msgid;
            }

        } elsif (/^\s*$/) {
            next;

        } elsif (/ ^ \s* \# /xms) {
            next;

        } else {
            die "ERROR: $pofile: line $.: invalid line $_";
        }
    }

    close $in;

    $locales{$locale} = \%trans;
}

sub usage {
    my $code = shift;
    my $msg = <<_EOC_;
Usage:
    $0 [options] <input-file>...

Options:

    -h
    --help              Print this help.

    -o file
    --output=file       Specify the output Lua module file path.

Copyright (C) Yichun Zhang (agentzh). All rights reserved.
_EOC_

    if ($code == 0) {
        print $msg;
        exit(0);
    }

    print STDERR $msg;
    exit($code);
}
